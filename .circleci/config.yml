version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test

  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: test backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [build-frontend]
  #     - run:
  #         name: scan frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [build-backend]
  #     - run:
  #         name: scan backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --force
  #           npm audit --audit-level=critical

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters Name=tag:project,Values=udapeople --output \
  #           text >> .circleci/ansible/inventory.txt
  #     - run:
  #         name: Install tar utility
  #         command: |
  #           yum install -y tar gzip
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy-environment:
  #         workflow_id:${CIRCLE_WORKFLOW_ID:0:7}

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ['84:32:c9:7d:de:c0:d3:09:47:a5:74:24:26:b8:d7:a8']
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           pip3 install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #         no_output_timeout: 30m
  # - destroy-environment:
  #     workflow_id:${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      # requires: [deploy-infrastructure]
      - run-migrations
        # requires: [configure-infrastructure]
